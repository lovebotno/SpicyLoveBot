import logging
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω—å
with open("questions.txt", "r", encoding="utf-8") as f:
    QUESTIONS = [line.strip() for line in f if line.strip()]

# –°—Ç–∞–Ω –≥—Ä–∞–≤—Ü—ñ–≤
players = {}
pairs = {}  # chat_id: [user1_id, user2_id]
answers = {}  # chat_id: {question_id: {user_id: answer}}
asked_questions = {}  # chat_id: [question_ids]

START_KEYBOARD = ReplyKeyboardMarkup([["–¢–∞–∫", "–ù—ñ"]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if chat_id not in pairs:
        pairs[chat_id] = [user_id]
        await update.message.reply_text("–ß–µ–∫–∞—î–º–æ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è...")
    elif user_id not in pairs[chat_id]:
        pairs[chat_id].append(user_id)
        await update.message.reply_text("üéâ –ì—Ä–∞–≤—Ü—ñ –∑'—î–¥–Ω–∞–Ω—ñ! –ü–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É.")
        await send_next_question(chat_id, context)
    else:
        await update.message.reply_text("–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ!")

async def send_next_question(chat_id, context):
    asked = asked_questions.get(chat_id, [])
    if len(asked) >= len(QUESTIONS):
        await context.bot.send_message(chat_id, "–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –ø–∏—Ç–∞–Ω—å –±—ñ–ª—å—à–µ –Ω–µ–º–∞ ‚ú®")
        return

    while True:
        q_id = random.randint(0, len(QUESTIONS) - 1)
        if q_id not in asked:
            break

    asked.append(q_id)
    asked_questions[chat_id] = asked
    q_text = QUESTIONS[q_id]

    if chat_id not in answers:
        answers[chat_id] = {}
    answers[chat_id][q_id] = {}

    await context.bot.send_message(chat_id, f"‚ùì {q_text}", reply_markup=START_KEYBOARD)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip().lower()

    if text not in ["—Ç–∞–∫", "–Ω—ñ"]:
        return

    if chat_id not in asked_questions or chat_id not in pairs:
        return

    q_id = asked_questions[chat_id][-1]
    answers[chat_id][q_id][user_id] = text

    # –ß–µ–∫–∞—î–º–æ –Ω–∞ –¥—Ä—É–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if len(answers[chat_id][q_id]) < 2:
        await update.message.reply_text("–û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è...")
        return

    vals = list(answers[chat_id][q_id].values())
    if vals[0] == vals[1]:
        await context.bot.send_message(chat_id, f"‚úÖ –ó–±—ñ–≥! –û–±–æ—î –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ " + ("—Ç–∞–∫." if vals[0] == "—Ç–∞–∫" else "–Ω—ñ."))
    else:
        await context.bot.send_message(chat_id, f"‚ùå –ù–µ–º–∞—î –∑–±—ñ–≥—É.")

    await send_next_question(chat_id, context)

if __name__ == '__main__':
    app = ApplicationBuilder().token("8194716705:AAG8dvxKlRggAlCzMrzSIEX7xm1v0cubAGE").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    app.run_polling()
