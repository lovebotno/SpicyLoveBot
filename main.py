import logging
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω—å
with open("questions.txt", "r", encoding="utf-8") as f:
    QUESTIONS = [line.strip() for line in f if line.strip()]

# –°—Ç–∞–Ω –≥—Ä–∞–≤—Ü—ñ–≤
players = {}
pairs = {}  # chat_id: [user1_id, user2_id]
answers = {}  # chat_id: {question_id: {user_id: answer}}
asked_questions = {}  # chat_id: [question_ids]
matched_questions = {}  # chat_id: [question_texts]
paused = {}  # chat_id: bool

BUTTONS = [["–¢–∞–∫", "–ù—ñ", "–¢–æ—á–Ω–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π"], ["–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", "–ü–∞—É–∑–∞"], ["–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", "–ó—É–ø–∏–Ω–∏—Ç–∏", "–ó–±—ñ–≥–∏"]]
START_KEYBOARD = ReplyKeyboardMarkup(BUTTONS, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    paused[chat_id] = False

    if chat_id not in pairs:
        pairs[chat_id] = [user_id]
        await update.message.reply_text("–ß–µ–∫–∞—î–º–æ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è...", reply_markup=START_KEYBOARD)
    elif user_id not in pairs[chat_id]:
        pairs[chat_id].append(user_id)
        await update.message.reply_text("üéâ –ì—Ä–∞–≤—Ü—ñ –∑'—î–¥–Ω–∞–Ω—ñ! –ü–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É.", reply_markup=START_KEYBOARD)
        await send_next_question(chat_id, context)
    else:
        await update.message.reply_text("–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ!", reply_markup=START_KEYBOARD)

async def send_next_question(chat_id, context):
    if paused.get(chat_id):
        return

    asked = asked_questions.get(chat_id, [])
    if len(asked) >= len(QUESTIONS):
        await context.bot.send_message(chat_id, "–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –ø–∏—Ç–∞–Ω—å –±—ñ–ª—å—à–µ –Ω–µ–º–∞ ‚ú®")
        return

    while True:
        q_id = random.randint(0, len(QUESTIONS) - 1)
        if q_id not in asked:
            break

    asked.append(q_id)
    asked_questions[chat_id] = asked
    q_text = QUESTIONS[q_id]

    if chat_id not in answers:
        answers[chat_id] = {}
    answers[chat_id][q_id] = {}

    await context.bot.send_message(chat_id, f"‚ùì {q_text}", reply_markup=START_KEYBOARD)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip().lower()

    if chat_id not in pairs:
        await update.message.reply_text("–ü–æ—á–Ω—ñ—Ç—å –≥—Ä—É –∫–æ–º–∞–Ω–¥–æ—é /start")
        return

    if text == "–ø–∞—É–∑–∞":
        paused[chat_id] = True
        await update.message.reply_text("‚è∏Ô∏è –ì—Ä—É –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É.")
        return
    elif text == "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏":
        if paused.get(chat_id):
            paused[chat_id] = False
            await update.message.reply_text("‚ñ∂Ô∏è –ì—Ä—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.")
            await send_next_question(chat_id, context)
        else:
            await update.message.reply_text("–ì—Ä–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return
    elif text == "–∑—É–ø–∏–Ω–∏—Ç–∏":
        await show_matches(chat_id, context)
        reset_game(chat_id)
        await update.message.reply_text("‚õî –ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'.")
        return
    elif text == "–ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ":
        reset_game(chat_id)
        pairs[chat_id] = [user_id]
        await update.message.reply_text("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É! –û—á—ñ–∫—É—î–º–æ –Ω–∞ –¥–≤–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤...", reply_markup=START_KEYBOARD)
        return
    elif text == "–∑–±—ñ–≥–∏":
        await show_matches(chat_id, context)
        return

    if text not in ["—Ç–∞–∫", "–Ω—ñ", "—Ç–æ—á–Ω–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π"]:
        return

    if chat_id not in asked_questions or chat_id not in pairs:
        return

    if paused.get(chat_id):
        await update.message.reply_text("‚è∏Ô∏è –ì—Ä—É –Ω–∞ –ø–∞—É–∑—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É.")
        return

    q_id = asked_questions[chat_id][-1]
    answers[chat_id][q_id][user_id] = text

    if len(answers[chat_id][q_id]) < 2:
        await update.message.reply_text("–û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è...")
        return

    vals = list(answers[chat_id][q_id].values())
    q_text = QUESTIONS[q_id]
    if vals[0] == vals[1]:
        await context.bot.send_message(chat_id, f"‚úÖ –ó–±—ñ–≥! –û–±–æ—î –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ {vals[0]}.")
        matched_questions.setdefault(chat_id, []).append(q_text)
    else:
        await context.bot.send_message(chat_id, f"‚ùå –ù–µ–º–∞—î –∑–±—ñ–≥—É.")

    await send_next_question(chat_id, context)

async def show_matches(chat_id, context):
    matches = matched_questions.get(chat_id, [])
    if not matches:
        await context.bot.send_message(chat_id, "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–±—ñ–≥—ñ–≤ üíî")
    else:
        result = "üíñ –ü–∏—Ç–∞–Ω–Ω—è –∑—ñ –∑–±—ñ–≥–æ–º:\n" + "\n".join(f"‚Ä¢ {q}" for q in matches)
        await context.bot.send_message(chat_id, result)

def reset_game(chat_id):
    asked_questions.pop(chat_id, None)
    answers.pop(chat_id, None)
    matched_questions.pop(chat_id, None)
    paused[chat_id] = False

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –ø–æ—á–∞—Ç–∏ –≥—Ä—É\n/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞\n–ö–Ω–æ–ø–∫–∏: –¢–∞–∫, –ù—ñ, –¢–æ—á–Ω–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, –ü–∞—É–∑–∞, –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ó—É–ø–∏–Ω–∏—Ç–∏, –ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ, –ó–±—ñ–≥–∏")

if __name__ == '__main__':
    app = ApplicationBuilder().token("8194716705:AAG8dvxKlRggAlCzMrzSIEX7xm1v0cubAGE").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    app.run_polling()
